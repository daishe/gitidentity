// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: gitidentity/config/v2/config.proto

package configv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionMode int32

const (
	ConditionMode_CONDITION_MODE_UNSPECIFIED   ConditionMode = 0 // no comparison mode specified, it indicates that a given string should contain some value
	ConditionMode_CONDITION_MODE_PREFIX        ConditionMode = 1 // comparison mode indicating, that a given string should have some value prefix
	ConditionMode_CONDITION_MODE_SUFFIX        ConditionMode = 2 // comparison mode indicating, that a given string should have some value suffix
	ConditionMode_CONDITION_MODE_FULL          ConditionMode = 3 // comparison mode indicating, that a given string should equal to some value fully
	ConditionMode_CONDITION_MODE_SHELL_PATTERN ConditionMode = 4 // comparison mode indicating, that a given string should match some value containing a shell patter
	ConditionMode_CONDITION_MODE_REGEXP        ConditionMode = 5 // comparison mode indicating, that a given string should match some value containing a regular expression
)

// Enum value maps for ConditionMode.
var (
	ConditionMode_name = map[int32]string{
		0: "CONDITION_MODE_UNSPECIFIED",
		1: "CONDITION_MODE_PREFIX",
		2: "CONDITION_MODE_SUFFIX",
		3: "CONDITION_MODE_FULL",
		4: "CONDITION_MODE_SHELL_PATTERN",
		5: "CONDITION_MODE_REGEXP",
	}
	ConditionMode_value = map[string]int32{
		"CONDITION_MODE_UNSPECIFIED":   0,
		"CONDITION_MODE_PREFIX":        1,
		"CONDITION_MODE_SUFFIX":        2,
		"CONDITION_MODE_FULL":          3,
		"CONDITION_MODE_SHELL_PATTERN": 4,
		"CONDITION_MODE_REGEXP":        5,
	}
)

func (x ConditionMode) Enum() *ConditionMode {
	p := new(ConditionMode)
	*p = x
	return p
}

func (x ConditionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitidentity_config_v2_config_proto_enumTypes[0].Descriptor()
}

func (ConditionMode) Type() protoreflect.EnumType {
	return &file_gitidentity_config_v2_config_proto_enumTypes[0]
}

func (x ConditionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionMode.Descriptor instead.
func (ConditionMode) EnumDescriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{0}
}

type VersionEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionEntity) Reset() {
	*x = VersionEntity{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionEntity) ProtoMessage() {}

func (x *VersionEntity) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionEntity.ProtoReflect.Descriptor instead.
func (*VersionEntity) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{0}
}

func (x *VersionEntity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // for this object must equal to "v2"
	List          []*Identity            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`       // list of targets
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Config) GetList() []*Identity {
	if x != nil {
		return x.List
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    string                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                   // identity identifier
	Values        map[string]string      `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // other git config values
	AutoApplyWhen []*MatchList           `protobuf:"bytes,100,rep,name=auto_apply_when,json=autoApplyWhen,proto3" json:"auto_apply_when,omitempty"`                                    // logical disjunction of logical conjunctions of match rules for identity auto application
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{2}
}

func (x *Identity) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Identity) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Identity) GetAutoApplyWhen() []*MatchList {
	if x != nil {
		return x.AutoApplyWhen
	}
	return nil
}

type MatchList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"` // logical conjunction of match rules
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchList) Reset() {
	*x = MatchList{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchList) ProtoMessage() {}

func (x *MatchList) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchList.ProtoReflect.Descriptor instead.
func (*MatchList) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{3}
}

func (x *MatchList) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type Match struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Subject:
	//
	//	*Match_Env
	//	*Match_Remote
	//	*Match_Command
	//	*Match_ShellScript
	Subject       isMatch_Subject `protobuf_oneof:"subject"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{4}
}

func (x *Match) GetSubject() isMatch_Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Match) GetEnv() *MatchEnv {
	if x != nil {
		if x, ok := x.Subject.(*Match_Env); ok {
			return x.Env
		}
	}
	return nil
}

func (x *Match) GetRemote() *MatchRemote {
	if x != nil {
		if x, ok := x.Subject.(*Match_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *Match) GetCommand() *MatchCommand {
	if x != nil {
		if x, ok := x.Subject.(*Match_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *Match) GetShellScript() *MatchShellScript {
	if x != nil {
		if x, ok := x.Subject.(*Match_ShellScript); ok {
			return x.ShellScript
		}
	}
	return nil
}

type isMatch_Subject interface {
	isMatch_Subject()
}

type Match_Env struct {
	Env *MatchEnv `protobuf:"bytes,1,opt,name=env,proto3,oneof"` // match rule on environment variable
}

type Match_Remote struct {
	Remote *MatchRemote `protobuf:"bytes,2,opt,name=remote,proto3,oneof"` // match rules on Git remote
}

type Match_Command struct {
	Command *MatchCommand `protobuf:"bytes,3,opt,name=command,proto3,oneof"` // match rules on command output
}

type Match_ShellScript struct {
	ShellScript *MatchShellScript `protobuf:"bytes,4,opt,name=shell_script,json=shellScript,proto3,oneof"` // match rules on shell script output
}

func (*Match_Env) isMatch_Subject() {}

func (*Match_Remote) isMatch_Subject() {}

func (*Match_Command) isMatch_Subject() {}

func (*Match_ShellScript) isMatch_Subject() {}

type MatchEnv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the environment variable
	To            *Condition             `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // condition to apply to the variable
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchEnv) Reset() {
	*x = MatchEnv{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEnv) ProtoMessage() {}

func (x *MatchEnv) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEnv.ProtoReflect.Descriptor instead.
func (*MatchEnv) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{5}
}

func (x *MatchEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchEnv) GetTo() *Condition {
	if x != nil {
		return x.To
	}
	return nil
}

type MatchRemote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *Condition             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // conditions to match remote name
	Url           *Condition             `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`   // conditions to match remote url
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchRemote) Reset() {
	*x = MatchRemote{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRemote) ProtoMessage() {}

func (x *MatchRemote) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRemote.ProtoReflect.Descriptor instead.
func (*MatchRemote) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{6}
}

func (x *MatchRemote) GetName() *Condition {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MatchRemote) GetUrl() *Condition {
	if x != nil {
		return x.Url
	}
	return nil
}

type MatchCommand struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Cmd                  string                 `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`                                                                      // path to command or command executable (if available in PATH)
	Args                 []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`                                                                    // list of arguments for command
	Output               *Condition             `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`                                                                // conditions on command output
	AllowNonZeroExitCode bool                   `protobuf:"varint,4,opt,name=allow_non_zero_exit_code,json=allowNonZeroExitCode,proto3" json:"allow_non_zero_exit_code,omitempty"` // controls if command non-zero exit code should be ignored by match rule
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MatchCommand) Reset() {
	*x = MatchCommand{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCommand) ProtoMessage() {}

func (x *MatchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCommand.ProtoReflect.Descriptor instead.
func (*MatchCommand) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{7}
}

func (x *MatchCommand) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *MatchCommand) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *MatchCommand) GetOutput() *Condition {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *MatchCommand) GetAllowNonZeroExitCode() bool {
	if x != nil {
		return x.AllowNonZeroExitCode
	}
	return false
}

type MatchShellScript struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Content              string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                              // shell script code
	Output               *Condition             `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`                                                                // conditions on script output
	AllowNonZeroExitCode bool                   `protobuf:"varint,3,opt,name=allow_non_zero_exit_code,json=allowNonZeroExitCode,proto3" json:"allow_non_zero_exit_code,omitempty"` // controls if script non-zero exit code should be ignored by match rule
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MatchShellScript) Reset() {
	*x = MatchShellScript{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchShellScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchShellScript) ProtoMessage() {}

func (x *MatchShellScript) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchShellScript.ProtoReflect.Descriptor instead.
func (*MatchShellScript) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{8}
}

func (x *MatchShellScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MatchShellScript) GetOutput() *Condition {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *MatchShellScript) GetAllowNonZeroExitCode() bool {
	if x != nil {
		return x.AllowNonZeroExitCode
	}
	return false
}

type Condition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          ConditionMode          `protobuf:"varint,1,opt,name=mode,proto3,enum=gitidentity.config.v2.ConditionMode" json:"mode,omitempty"` // mode of string comparison
	Negate        bool                   `protobuf:"varint,2,opt,name=negate,proto3" json:"negate,omitempty"`                                      // reverse condition, when true condition will be treaded as successful, when value does not match
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                         // value for comparison
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_gitidentity_config_v2_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_gitidentity_config_v2_config_proto_rawDescGZIP(), []int{9}
}

func (x *Condition) GetMode() ConditionMode {
	if x != nil {
		return x.Mode
	}
	return ConditionMode_CONDITION_MODE_UNSPECIFIED
}

func (x *Condition) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *Condition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_gitidentity_config_v2_config_proto protoreflect.FileDescriptor

const file_gitidentity_config_v2_config_proto_rawDesc = "" +
	"\n" +
	"\"gitidentity/config/v2/config.proto\x12\x15gitidentity.config.v2\")\n" +
	"\rVersionEntity\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"W\n" +
	"\x06Config\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x123\n" +
	"\x04list\x18\x02 \x03(\v2\x1f.gitidentity.config.v2.IdentityR\x04list\"\xf4\x01\n" +
	"\bIdentity\x12\x1e\n" +
	"\n" +
	"identifier\x18\x01 \x01(\tR\n" +
	"identifier\x12C\n" +
	"\x06values\x18\x02 \x03(\v2+.gitidentity.config.v2.Identity.ValuesEntryR\x06values\x12H\n" +
	"\x0fauto_apply_when\x18d \x03(\v2 .gitidentity.config.v2.MatchListR\rautoApplyWhen\x1a9\n" +
	"\vValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"?\n" +
	"\tMatchList\x122\n" +
	"\x05match\x18\x01 \x03(\v2\x1c.gitidentity.config.v2.MatchR\x05match\"\x94\x02\n" +
	"\x05Match\x123\n" +
	"\x03env\x18\x01 \x01(\v2\x1f.gitidentity.config.v2.MatchEnvH\x00R\x03env\x12<\n" +
	"\x06remote\x18\x02 \x01(\v2\".gitidentity.config.v2.MatchRemoteH\x00R\x06remote\x12?\n" +
	"\acommand\x18\x03 \x01(\v2#.gitidentity.config.v2.MatchCommandH\x00R\acommand\x12L\n" +
	"\fshell_script\x18\x04 \x01(\v2'.gitidentity.config.v2.MatchShellScriptH\x00R\vshellScriptB\t\n" +
	"\asubject\"P\n" +
	"\bMatchEnv\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x02to\x18\x02 \x01(\v2 .gitidentity.config.v2.ConditionR\x02to\"w\n" +
	"\vMatchRemote\x124\n" +
	"\x04name\x18\x01 \x01(\v2 .gitidentity.config.v2.ConditionR\x04name\x122\n" +
	"\x03url\x18\x02 \x01(\v2 .gitidentity.config.v2.ConditionR\x03url\"\xa6\x01\n" +
	"\fMatchCommand\x12\x10\n" +
	"\x03cmd\x18\x01 \x01(\tR\x03cmd\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\x128\n" +
	"\x06output\x18\x03 \x01(\v2 .gitidentity.config.v2.ConditionR\x06output\x126\n" +
	"\x18allow_non_zero_exit_code\x18\x04 \x01(\bR\x14allowNonZeroExitCode\"\x9e\x01\n" +
	"\x10MatchShellScript\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x128\n" +
	"\x06output\x18\x02 \x01(\v2 .gitidentity.config.v2.ConditionR\x06output\x126\n" +
	"\x18allow_non_zero_exit_code\x18\x03 \x01(\bR\x14allowNonZeroExitCode\"s\n" +
	"\tCondition\x128\n" +
	"\x04mode\x18\x01 \x01(\x0e2$.gitidentity.config.v2.ConditionModeR\x04mode\x12\x16\n" +
	"\x06negate\x18\x02 \x01(\bR\x06negate\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value*\xbb\x01\n" +
	"\rConditionMode\x12\x1e\n" +
	"\x1aCONDITION_MODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CONDITION_MODE_PREFIX\x10\x01\x12\x19\n" +
	"\x15CONDITION_MODE_SUFFIX\x10\x02\x12\x17\n" +
	"\x13CONDITION_MODE_FULL\x10\x03\x12 \n" +
	"\x1cCONDITION_MODE_SHELL_PATTERN\x10\x04\x12\x19\n" +
	"\x15CONDITION_MODE_REGEXP\x10\x05B\xdc\x01\n" +
	"\x19com.gitidentity.config.v2B\vConfigProtoP\x01Z<github.com/daishe/gitidentity/gitidentity/config/v2;configv2\xa2\x02\x03GCX\xaa\x02\x15Gitidentity.Config.V2\xca\x02\x15Gitidentity\\Config\\V2\xe2\x02!Gitidentity\\Config\\V2\\GPBMetadata\xea\x02\x17Gitidentity::Config::V2b\x06proto3"

var (
	file_gitidentity_config_v2_config_proto_rawDescOnce sync.Once
	file_gitidentity_config_v2_config_proto_rawDescData []byte
)

func file_gitidentity_config_v2_config_proto_rawDescGZIP() []byte {
	file_gitidentity_config_v2_config_proto_rawDescOnce.Do(func() {
		file_gitidentity_config_v2_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitidentity_config_v2_config_proto_rawDesc), len(file_gitidentity_config_v2_config_proto_rawDesc)))
	})
	return file_gitidentity_config_v2_config_proto_rawDescData
}

var file_gitidentity_config_v2_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitidentity_config_v2_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gitidentity_config_v2_config_proto_goTypes = []any{
	(ConditionMode)(0),       // 0: gitidentity.config.v2.ConditionMode
	(*VersionEntity)(nil),    // 1: gitidentity.config.v2.VersionEntity
	(*Config)(nil),           // 2: gitidentity.config.v2.Config
	(*Identity)(nil),         // 3: gitidentity.config.v2.Identity
	(*MatchList)(nil),        // 4: gitidentity.config.v2.MatchList
	(*Match)(nil),            // 5: gitidentity.config.v2.Match
	(*MatchEnv)(nil),         // 6: gitidentity.config.v2.MatchEnv
	(*MatchRemote)(nil),      // 7: gitidentity.config.v2.MatchRemote
	(*MatchCommand)(nil),     // 8: gitidentity.config.v2.MatchCommand
	(*MatchShellScript)(nil), // 9: gitidentity.config.v2.MatchShellScript
	(*Condition)(nil),        // 10: gitidentity.config.v2.Condition
	nil,                      // 11: gitidentity.config.v2.Identity.ValuesEntry
}
var file_gitidentity_config_v2_config_proto_depIdxs = []int32{
	3,  // 0: gitidentity.config.v2.Config.list:type_name -> gitidentity.config.v2.Identity
	11, // 1: gitidentity.config.v2.Identity.values:type_name -> gitidentity.config.v2.Identity.ValuesEntry
	4,  // 2: gitidentity.config.v2.Identity.auto_apply_when:type_name -> gitidentity.config.v2.MatchList
	5,  // 3: gitidentity.config.v2.MatchList.match:type_name -> gitidentity.config.v2.Match
	6,  // 4: gitidentity.config.v2.Match.env:type_name -> gitidentity.config.v2.MatchEnv
	7,  // 5: gitidentity.config.v2.Match.remote:type_name -> gitidentity.config.v2.MatchRemote
	8,  // 6: gitidentity.config.v2.Match.command:type_name -> gitidentity.config.v2.MatchCommand
	9,  // 7: gitidentity.config.v2.Match.shell_script:type_name -> gitidentity.config.v2.MatchShellScript
	10, // 8: gitidentity.config.v2.MatchEnv.to:type_name -> gitidentity.config.v2.Condition
	10, // 9: gitidentity.config.v2.MatchRemote.name:type_name -> gitidentity.config.v2.Condition
	10, // 10: gitidentity.config.v2.MatchRemote.url:type_name -> gitidentity.config.v2.Condition
	10, // 11: gitidentity.config.v2.MatchCommand.output:type_name -> gitidentity.config.v2.Condition
	10, // 12: gitidentity.config.v2.MatchShellScript.output:type_name -> gitidentity.config.v2.Condition
	0,  // 13: gitidentity.config.v2.Condition.mode:type_name -> gitidentity.config.v2.ConditionMode
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_gitidentity_config_v2_config_proto_init() }
func file_gitidentity_config_v2_config_proto_init() {
	if File_gitidentity_config_v2_config_proto != nil {
		return
	}
	file_gitidentity_config_v2_config_proto_msgTypes[4].OneofWrappers = []any{
		(*Match_Env)(nil),
		(*Match_Remote)(nil),
		(*Match_Command)(nil),
		(*Match_ShellScript)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitidentity_config_v2_config_proto_rawDesc), len(file_gitidentity_config_v2_config_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitidentity_config_v2_config_proto_goTypes,
		DependencyIndexes: file_gitidentity_config_v2_config_proto_depIdxs,
		EnumInfos:         file_gitidentity_config_v2_config_proto_enumTypes,
		MessageInfos:      file_gitidentity_config_v2_config_proto_msgTypes,
	}.Build()
	File_gitidentity_config_v2_config_proto = out.File
	file_gitidentity_config_v2_config_proto_goTypes = nil
	file_gitidentity_config_v2_config_proto_depIdxs = nil
}
