// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: config/v2/config.proto

package configv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionMode int32

const (
	ConditionMode_CONTAINS      ConditionMode = 0 // comparison mode indicating, that a given string should contain some value
	ConditionMode_PREFIX        ConditionMode = 1 // comparison mode indicating, that a given string should have some value prefix
	ConditionMode_SUFFIX        ConditionMode = 2 // comparison mode indicating, that a given string should have some value suffix
	ConditionMode_FULL          ConditionMode = 3 // comparison mode indicating, that a given string should equal to some value fully
	ConditionMode_SHELL_PATTERN ConditionMode = 4 // comparison mode indicating, that a given string should match some value containing a shell patter
	ConditionMode_REGEXP        ConditionMode = 5 // comparison mode indicating, that a given string should match some value containing a regular expression
)

// Enum value maps for ConditionMode.
var (
	ConditionMode_name = map[int32]string{
		0: "CONTAINS",
		1: "PREFIX",
		2: "SUFFIX",
		3: "FULL",
		4: "SHELL_PATTERN",
		5: "REGEXP",
	}
	ConditionMode_value = map[string]int32{
		"CONTAINS":      0,
		"PREFIX":        1,
		"SUFFIX":        2,
		"FULL":          3,
		"SHELL_PATTERN": 4,
		"REGEXP":        5,
	}
)

func (x ConditionMode) Enum() *ConditionMode {
	p := new(ConditionMode)
	*p = x
	return p
}

func (x ConditionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v2_config_proto_enumTypes[0].Descriptor()
}

func (ConditionMode) Type() protoreflect.EnumType {
	return &file_config_v2_config_proto_enumTypes[0]
}

func (x ConditionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionMode.Descriptor instead.
func (ConditionMode) EnumDescriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{0}
}

type VersionEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionEntity) Reset() {
	*x = VersionEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionEntity) ProtoMessage() {}

func (x *VersionEntity) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionEntity.ProtoReflect.Descriptor instead.
func (*VersionEntity) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{0}
}

func (x *VersionEntity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // for this object must equal to "v2"
	List    []*Identity `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`       // list of targets
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Config) GetList() []*Identity {
	if x != nil {
		return x.List
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier    string            `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                                 // identity identifier
	Values        map[string]string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // other git config values
	AutoApplyWhen []*MatchList      `protobuf:"bytes,100,rep,name=auto_apply_when,json=autoApplyWhen,proto3" json:"auto_apply_when,omitempty"`                                                  // logical disjunction of logical conjunctions of match rules for identity auto application
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{2}
}

func (x *Identity) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Identity) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Identity) GetAutoApplyWhen() []*MatchList {
	if x != nil {
		return x.AutoApplyWhen
	}
	return nil
}

type MatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match []*Match `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"` // logical conjunction of match rules
}

func (x *MatchList) Reset() {
	*x = MatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchList) ProtoMessage() {}

func (x *MatchList) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchList.ProtoReflect.Descriptor instead.
func (*MatchList) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{3}
}

func (x *MatchList) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subject:
	//
	//	*Match_Env
	//	*Match_Remote
	//	*Match_Command
	//	*Match_ShellScript
	Subject isMatch_Subject `protobuf_oneof:"subject"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{4}
}

func (m *Match) GetSubject() isMatch_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *Match) GetEnv() *MatchEnv {
	if x, ok := x.GetSubject().(*Match_Env); ok {
		return x.Env
	}
	return nil
}

func (x *Match) GetRemote() *MatchRemote {
	if x, ok := x.GetSubject().(*Match_Remote); ok {
		return x.Remote
	}
	return nil
}

func (x *Match) GetCommand() *MatchCommand {
	if x, ok := x.GetSubject().(*Match_Command); ok {
		return x.Command
	}
	return nil
}

func (x *Match) GetShellScript() *MatchShellScript {
	if x, ok := x.GetSubject().(*Match_ShellScript); ok {
		return x.ShellScript
	}
	return nil
}

type isMatch_Subject interface {
	isMatch_Subject()
}

type Match_Env struct {
	Env *MatchEnv `protobuf:"bytes,1,opt,name=env,proto3,oneof"` // match rule on environment variable
}

type Match_Remote struct {
	Remote *MatchRemote `protobuf:"bytes,2,opt,name=remote,proto3,oneof"` // match rules on Git remote
}

type Match_Command struct {
	Command *MatchCommand `protobuf:"bytes,3,opt,name=command,proto3,oneof"` // match rules on command output
}

type Match_ShellScript struct {
	ShellScript *MatchShellScript `protobuf:"bytes,4,opt,name=shell_script,json=shellScript,proto3,oneof"` // match rules on shell script output
}

func (*Match_Env) isMatch_Subject() {}

func (*Match_Remote) isMatch_Subject() {}

func (*Match_Command) isMatch_Subject() {}

func (*Match_ShellScript) isMatch_Subject() {}

type MatchEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the environment variable
	To   *Condition `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // condition to apply to the variable
}

func (x *MatchEnv) Reset() {
	*x = MatchEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEnv) ProtoMessage() {}

func (x *MatchEnv) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEnv.ProtoReflect.Descriptor instead.
func (*MatchEnv) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{5}
}

func (x *MatchEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchEnv) GetTo() *Condition {
	if x != nil {
		return x.To
	}
	return nil
}

type MatchRemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *Condition `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // conditions to match remote name
	Url  *Condition `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`   // conditions to match remote url
}

func (x *MatchRemote) Reset() {
	*x = MatchRemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRemote) ProtoMessage() {}

func (x *MatchRemote) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRemote.ProtoReflect.Descriptor instead.
func (*MatchRemote) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{6}
}

func (x *MatchRemote) GetName() *Condition {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MatchRemote) GetUrl() *Condition {
	if x != nil {
		return x.Url
	}
	return nil
}

type MatchCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                  string     `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`                                                                      // path to command or command executable (if available in PATH)
	Args                 []string   `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`                                                                    // list of arguments for command
	Output               *Condition `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`                                                                // conditions on command output
	AllowNonZeroExitCode bool       `protobuf:"varint,4,opt,name=allow_non_zero_exit_code,json=allowNonZeroExitCode,proto3" json:"allow_non_zero_exit_code,omitempty"` // controls if command non-zero exit code should be ignored by match rule
}

func (x *MatchCommand) Reset() {
	*x = MatchCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCommand) ProtoMessage() {}

func (x *MatchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCommand.ProtoReflect.Descriptor instead.
func (*MatchCommand) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{7}
}

func (x *MatchCommand) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *MatchCommand) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *MatchCommand) GetOutput() *Condition {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *MatchCommand) GetAllowNonZeroExitCode() bool {
	if x != nil {
		return x.AllowNonZeroExitCode
	}
	return false
}

type MatchShellScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content              string     `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                              // shell script code
	Output               *Condition `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`                                                                // conditions on script output
	AllowNonZeroExitCode bool       `protobuf:"varint,3,opt,name=allow_non_zero_exit_code,json=allowNonZeroExitCode,proto3" json:"allow_non_zero_exit_code,omitempty"` // controls if script non-zero exit code should be ignored by match rule
}

func (x *MatchShellScript) Reset() {
	*x = MatchShellScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchShellScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchShellScript) ProtoMessage() {}

func (x *MatchShellScript) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchShellScript.ProtoReflect.Descriptor instead.
func (*MatchShellScript) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{8}
}

func (x *MatchShellScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MatchShellScript) GetOutput() *Condition {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *MatchShellScript) GetAllowNonZeroExitCode() bool {
	if x != nil {
		return x.AllowNonZeroExitCode
	}
	return false
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   ConditionMode `protobuf:"varint,1,opt,name=mode,proto3,enum=gitidentity.config.v2.ConditionMode" json:"mode,omitempty"` // mode of string comparison
	Negate bool          `protobuf:"varint,2,opt,name=negate,proto3" json:"negate,omitempty"`                                      // reverse condition, when true condition will be treaded as successful, when value does not match
	Value  string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                         // value for comparison
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_v2_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_config_v2_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_config_v2_config_proto_rawDescGZIP(), []int{9}
}

func (x *Condition) GetMode() ConditionMode {
	if x != nil {
		return x.Mode
	}
	return ConditionMode_CONTAINS
}

func (x *Condition) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (x *Condition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_config_v2_config_proto protoreflect.FileDescriptor

var file_config_v2_config_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x22,
	0x29, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x1a,
	0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x94, 0x02, 0x0a, 0x05,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x50, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xa6, 0x01,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36,
	0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x5a, 0x65, 0x72, 0x6f, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x36, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x7a, 0x65, 0x72,
	0x6f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x5a, 0x65, 0x72, 0x6f, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x5e, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x10, 0x05, 0x42, 0xd0, 0x01, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x69, 0x73, 0x68, 0x65, 0x2f, 0x67, 0x69, 0x74,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x32, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x47, 0x43,
	0x58, 0xaa, 0x02, 0x15, 0x47, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x15, 0x47, 0x69, 0x74, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56,
	0x32, 0xe2, 0x02, 0x21, 0x47, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x47, 0x69, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_v2_config_proto_rawDescOnce sync.Once
	file_config_v2_config_proto_rawDescData = file_config_v2_config_proto_rawDesc
)

func file_config_v2_config_proto_rawDescGZIP() []byte {
	file_config_v2_config_proto_rawDescOnce.Do(func() {
		file_config_v2_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v2_config_proto_rawDescData)
	})
	return file_config_v2_config_proto_rawDescData
}

var file_config_v2_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_v2_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_v2_config_proto_goTypes = []interface{}{
	(ConditionMode)(0),       // 0: gitidentity.config.v2.ConditionMode
	(*VersionEntity)(nil),    // 1: gitidentity.config.v2.VersionEntity
	(*Config)(nil),           // 2: gitidentity.config.v2.Config
	(*Identity)(nil),         // 3: gitidentity.config.v2.Identity
	(*MatchList)(nil),        // 4: gitidentity.config.v2.MatchList
	(*Match)(nil),            // 5: gitidentity.config.v2.Match
	(*MatchEnv)(nil),         // 6: gitidentity.config.v2.MatchEnv
	(*MatchRemote)(nil),      // 7: gitidentity.config.v2.MatchRemote
	(*MatchCommand)(nil),     // 8: gitidentity.config.v2.MatchCommand
	(*MatchShellScript)(nil), // 9: gitidentity.config.v2.MatchShellScript
	(*Condition)(nil),        // 10: gitidentity.config.v2.Condition
	nil,                      // 11: gitidentity.config.v2.Identity.ValuesEntry
}
var file_config_v2_config_proto_depIdxs = []int32{
	3,  // 0: gitidentity.config.v2.Config.list:type_name -> gitidentity.config.v2.Identity
	11, // 1: gitidentity.config.v2.Identity.values:type_name -> gitidentity.config.v2.Identity.ValuesEntry
	4,  // 2: gitidentity.config.v2.Identity.auto_apply_when:type_name -> gitidentity.config.v2.MatchList
	5,  // 3: gitidentity.config.v2.MatchList.match:type_name -> gitidentity.config.v2.Match
	6,  // 4: gitidentity.config.v2.Match.env:type_name -> gitidentity.config.v2.MatchEnv
	7,  // 5: gitidentity.config.v2.Match.remote:type_name -> gitidentity.config.v2.MatchRemote
	8,  // 6: gitidentity.config.v2.Match.command:type_name -> gitidentity.config.v2.MatchCommand
	9,  // 7: gitidentity.config.v2.Match.shell_script:type_name -> gitidentity.config.v2.MatchShellScript
	10, // 8: gitidentity.config.v2.MatchEnv.to:type_name -> gitidentity.config.v2.Condition
	10, // 9: gitidentity.config.v2.MatchRemote.name:type_name -> gitidentity.config.v2.Condition
	10, // 10: gitidentity.config.v2.MatchRemote.url:type_name -> gitidentity.config.v2.Condition
	10, // 11: gitidentity.config.v2.MatchCommand.output:type_name -> gitidentity.config.v2.Condition
	10, // 12: gitidentity.config.v2.MatchShellScript.output:type_name -> gitidentity.config.v2.Condition
	0,  // 13: gitidentity.config.v2.Condition.mode:type_name -> gitidentity.config.v2.ConditionMode
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_config_v2_config_proto_init() }
func file_config_v2_config_proto_init() {
	if File_config_v2_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_v2_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchShellScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_v2_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_v2_config_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Match_Env)(nil),
		(*Match_Remote)(nil),
		(*Match_Command)(nil),
		(*Match_ShellScript)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v2_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v2_config_proto_goTypes,
		DependencyIndexes: file_config_v2_config_proto_depIdxs,
		EnumInfos:         file_config_v2_config_proto_enumTypes,
		MessageInfos:      file_config_v2_config_proto_msgTypes,
	}.Build()
	File_config_v2_config_proto = out.File
	file_config_v2_config_proto_rawDesc = nil
	file_config_v2_config_proto_goTypes = nil
	file_config_v2_config_proto_depIdxs = nil
}
